open Ast.Core;

module Property = {
  let title = (prop: string) => "title" -> textAttr(prop);
  let selected = (prop: bool) => "selected" -> boolAttr(prop);
  let hidden = (prop: bool) => "hidden" -> boolAttr(prop);
  let value = (prop: string) => "value" -> textAttr(prop);
  let defaultValue = (prop: string) => "defaultValue" -> textAttr(prop);
  let accept = (prop: string) => "accept" -> textAttr(prop);
  let acceptCharset = (prop: string) => "acceptCharset" -> textAttr(prop);
  let autocomplete = (prop: bool) => "autocomplete" -> boolAttr(prop);
  let action = (prop: string) => "action" -> textAttr(prop);
  let autosave = (prop: string) => "autosave" -> textAttr(prop);
  let disabled = (prop: bool) => "disabled" -> boolAttr(prop);
  let enctype = (prop: string) => "enctype" -> textAttr(prop);
  let formation = (prop: string) => "formation" -> textAttr(prop);
  let list = (prop: string) => "list" -> textAttr(prop);
  let maxlength = (prop: string) => "maxlength" -> textAttr(prop);
  let minlength = (prop: string) => "minlength" -> textAttr(prop);
  let method_ = (prop: string) => "method" -> textAttr(prop);
  let multiple = (prop: bool) => "multiple" -> boolAttr(prop);
  let novalidate = (prop: bool) => "novalidate" -> boolAttr(prop);
  let pattern = (prop: string) =>  "pattern" -> textAttr(prop);
  let readonly = (prop: bool) =>  "readonly" -> boolAttr(prop);
  let required = (prop: bool) =>  "required" -> boolAttr(prop);
  let size = (prop: string) =>  "size" -> textAttr(prop);
  let for_ = (prop: string) =>  "for" -> textAttr(prop);
  let form = (prop: string) =>  "form" -> textAttr(prop);
  let max = (prop: string) =>  "max" -> textAttr(prop);
  let min = (prop: string) =>  "min" -> textAttr(prop);
  let step = (prop: string) =>  "step" -> textAttr(prop);
  let cols = (prop: string) =>  "cols" -> textAttr(prop);
  let rows = (prop: string) =>  "rows" -> textAttr(prop);
  let wrap = (prop: string) =>  "wrap" -> textAttr(prop);
  let target = (prop: string) =>  "target" -> textAttr(prop);
  let download = (prop: string) =>  "download" -> textAttr(prop);
  let downloadAs = (prop: string) =>  "downloadAs" -> textAttr(prop);
  let hreflang = (prop: string) =>  "hreflang" -> textAttr(prop);
  let media = (prop: string) =>  "media" -> textAttr(prop);
  let ping = (prop: string) =>  "ping" -> textAttr(prop);
  let rel = (prop: string) =>  "rel" -> textAttr(prop);
  let ismap = (prop: string) =>  "ismap" -> textAttr(prop);
  let usemap = (prop: string) =>  "usemap" -> textAttr(prop);
  let shape = (prop: string) =>  "shape" -> textAttr(prop);
  let src = (prop: string) =>  "src" -> textAttr(prop);
  let heigth = (prop: string) =>  "heigth" -> textAttr(prop);
  let width = (prop: string) =>  "width" -> textAttr(prop);
  let alt = (prop: string) =>  "alt" -> textAttr(prop);
  let autoplay = (prop: bool) =>  "autoplay" -> boolAttr(prop);
  let controls = (prop: bool) =>  "controls" -> boolAttr(prop);
  let loop = (prop: bool) =>  "loop" -> boolAttr(prop);
  let preload = (prop: string) =>  "preload" -> textAttr(prop);
  let poster = (prop: string) =>  "poster" -> textAttr(prop);
  let default = (prop: bool) =>  "default" -> boolAttr(prop);
  let kind = (prop: string) =>  "kind" -> textAttr(prop);
  let srclang = (prop: string) =>  "srclang" -> textAttr(prop);
  let sandbox = (prop: string) =>  "sandbox" -> textAttr(prop);
  let seamless = (prop: string) =>  "seamless" -> textAttr(prop);
  let srcdoc = (prop: string) =>  "srcdoc" -> textAttr(prop);
  let style = (prop: string) =>  "style" -> textAttr(prop);
  let reversed = (prop: string) =>  "reversed" -> textAttr(prop);
  let start = (prop: string) =>  "start" -> textAttr(prop);
  let align = (prop: string) =>  "align" -> textAttr(prop);
  let colspan = (prop: string) =>  "colspan" -> textAttr(prop);
  let rowspan = (prop: string) =>  "rowspan" -> textAttr(prop);
  let headers = (prop: string) =>  "headers" -> textAttr(prop);
  let scope = (prop: string) =>  "scope" -> textAttr(prop);
  let async = (prop: string) =>  "async" -> textAttr(prop);
  let charset = (prop: string) =>  "charset" -> textAttr(prop);
  let content = (prop: string) =>  "content" -> textAttr(prop);
  let defer = (prop: string) =>  "defer" -> textAttr(prop);
  let httpEquiv = (prop: string) =>  "httpEquiv" -> textAttr(prop);
  let language = (prop: string) =>  "language" -> textAttr(prop);
  let scoped = (prop: string) =>  "scoped" -> textAttr(prop);
  let type_ = (prop: string) =>  "type" -> textAttr(prop);
  let name = (prop: string) =>  "name" -> textAttr(prop);
  let href = (prop: string) =>  "href" -> textAttr(prop);
  let id = (prop: string) =>  "id" -> textAttr(prop);
  let placeholder = (prop: string) =>  "placeholder" -> textAttr(prop);
  let property = (prop: string) =>  "property" -> textAttr(prop);
  let checked = (prop: bool) =>  "checked" -> boolAttr(prop);
  let autofocus = (prop: bool) =>  "autofocus" -> boolAttr(prop);
  let class_ = (prop: string) =>  "class" -> textAttr(prop);
};

module HTML = {
    let text = (node: string) => [node];
    let a = (attrs: list(string), children: list(string)) => render("a", attrs, children);
    let abbr = (attrs: list(string), children: list(string)) => render("abbr", attrs, children);
    let address = (attrs: list(string), children: list(string)) => render("address", attrs, children);
    let area = (attrs: list(string), children: list(string)) => render("area", attrs, children);
    let article = (attrs: list(string), children: list(string)) => render("article", attrs, children);
    let aside = (attrs: list(string), children: list(string)) => render("aside", attrs, children);
    let audio = (attrs: list(string), children: list(string)) => render("audio", attrs, children);
    let b = (attrs: list(string), children: list(string)) => render("b", attrs, children);
    let base = (attrs: list(string), children: list(string)) => render("base", attrs, children);
    let bdi = (attrs: list(string), children: list(string)) => render("bdi", attrs, children);
    let bdo = (attrs: list(string), children: list(string)) => render("bdo", attrs, children);
    let blockquotes = (attrs: list(string), children: list(string)) => render("blockquotes", attrs, children);
    let body = (attrs: list(string), children: list(string)) => render("body", attrs, children);
    let br = (attrs: list(string), children: list(string)) => render("br", attrs, children);
    let button = (attrs: list(string), children: list(string)) => render("button", attrs, children);
    let canvas = (attrs: list(string), children: list(string)) => render("canvas", attrs, children);
    let caption = (attrs: list(string), children: list(string)) => render("caption", attrs, children);
    let cite = (attrs: list(string), children: list(string)) => render("cite", attrs, children);
    let code = (attrs: list(string), children: list(string)) => render("code", attrs, children);
    let col = (attrs: list(string), children: list(string)) => render("col", attrs, children);
    let colgroup = (attrs: list(string), children: list(string)) => render("colgroup", attrs, children);
    let command = (attrs: list(string), children: list(string)) => render("command", attrs, children);
    let datalist = (attrs: list(string), children: list(string)) => render("datalist", attrs, children);
    let dd = (attrs: list(string), children: list(string)) => render("dd", attrs, children);
    let del = (attrs: list(string), children: list(string)) => render("del", attrs, children);
    let details = (attrs: list(string), children: list(string)) => render("details", attrs, children);
    let dfn = (attrs: list(string), children: list(string)) => render("dfn", attrs, children);
    let dialog = (attrs: list(string), children: list(string)) => render("dialog", attrs, children);
    let div = (attrs: list(string), children: list(string)) => render("div", attrs, children);
    let dl = (attrs: list(string), children: list(string)) => render("dl", attrs, children);
    let dt = (attrs: list(string), children: list(string)) => render("dt", attrs, children);
    let em = (attrs: list(string), children: list(string)) => render("em", attrs, children);
    let embed = (attrs: list(string), children: list(string)) => render("embed", attrs, children);
    let figcation = (attrs: list(string), children: list(string)) => render("figcation", attrs, children);
    let figure = (attrs: list(string), children: list(string)) => render("figure", attrs, children);
    let footer = (attrs: list(string), children: list(string)) => render("footer", attrs, children);
    let form = (attrs: list(string), children: list(string)) => render("form", attrs, children);
    let h1 = (attrs: list(string), children: list(string)) => render("h1", attrs, children);
    let h2 = (attrs: list(string), children: list(string)) => render("h2", attrs, children);
    let h3 = (attrs: list(string), children: list(string)) => render("h3", attrs, children);
    let h4 = (attrs: list(string), children: list(string)) => render("h4", attrs, children);
    let h5 = (attrs: list(string), children: list(string)) => render("h5", attrs, children);
    let h6 = (attrs: list(string), children: list(string)) => render("h6", attrs, children);
    let head = (attrs: list(string), children: list(string)) => render("head", attrs, children);
    let header = (attrs: list(string), children: list(string)) => render("header", attrs, children);
    let hr = (attrs: list(string), children: list(string)) => render("hr", attrs, children);
    let html = (attrs: list(string), children: list(string)) => render("html", attrs, children);
    let i = (attrs: list(string), children: list(string)) => render("i", attrs, children);
    let iframe = (attrs: list(string), children: list(string)) => render("iframe", attrs, children);
    let img = (attrs: list(string), children: list(string)) => render("img", attrs, children);
    let input = (attrs: list(string), children: list(string)) => render("input", attrs, children);
    let ins = (attrs: list(string), children: list(string)) => render("ins", attrs, children);
    let kbd = (attrs: list(string), children: list(string)) => render("kbd", attrs, children);
    let label = (attrs: list(string), children: list(string)) => render("label", attrs, children);
    let legend = (attrs: list(string), children: list(string)) => render("legend", attrs, children);
    let li = (attrs: list(string), children: list(string)) => render("li", attrs, children);
    let link = (attrs: list(string), children: list(string)) => render("link", attrs, children);
    let main = (attrs: list(string), children: list(string)) => render("main", attrs, children);
    let map = (attrs: list(string), children: list(string)) => render("map", attrs, children);
    let mark = (attrs: list(string), children: list(string)) => render("mark", attrs, children);
    let menu = (attrs: list(string), children: list(string)) => render("menu", attrs, children);
    let menuItem = (attrs: list(string), children: list(string)) => render("menuItem", attrs, children);
    let meta = (attrs: list(string), children: list(string)) => render("meta", attrs, children);
    let meter = (attrs: list(string), children: list(string)) => render("meter", attrs, children);
    let nav = (attrs: list(string), children: list(string)) => render("nav", attrs, children);
    let noscript = (attrs: list(string), children: list(string)) => render("noscript", attrs, children);
    // object is a reserved keyword
    let object_ = (attrs: list(string), children: list(string)) => render("object", attrs, children);
    let ol = (attrs: list(string), children: list(string)) => render("ol", attrs, children);
    let optgroup = (attrs: list(string), children: list(string)) => render("optgroup", attrs, children);
    let p = (attrs: list(string), children: list(string)) => render("p", attrs, children);
    let param = (attrs: list(string), children: list(string)) => render("param", attrs, children);
    let pre = (attrs: list(string), children: list(string)) => render("pre", attrs, children);
    let q = (attrs: list(string), children: list(string)) => render("q", attrs, children);
    let rp = (attrs: list(string), children: list(string)) => render("rp", attrs, children);
    let rt = (attrs: list(string), children: list(string)) => render("rt", attrs, children);
    let ruby = (attrs: list(string), children: list(string)) => render("ruby", attrs, children);
    let samp = (attrs: list(string), children: list(string)) => render("samp", attrs, children);
    // escape runtime
    let script = (attrs: list(string), children: list(string)) => render("script", attrs, children);
    let section = (attrs: list(string), children: list(string)) => render("section", attrs, children);
    let select = (attrs: list(string), children: list(string)) => render("select", attrs, children);
    let small = (attrs: list(string), children: list(string)) => render("small", attrs, children);
    let source = (attrs: list(string), children: list(string)) => render("source", attrs, children);
    let span = (attrs: list(string), children: list(string)) => render("span", attrs, children);
    let strong = (attrs: list(string), children: list(string)) => render("strong", attrs, children);
    let style = (attrs: list(string), children: list(string)) => render("style", attrs, children);
    let sub = (attrs: list(string), children: list(string)) => render("sub", attrs, children);
    let summary = (attrs: list(string), children: list(string)) => render("summary", attrs, children);
    let sup = (attrs: list(string), children: list(string)) => render("sup", attrs, children);
    let table = (attrs: list(string), children: list(string)) => render("table", attrs, children);
    let tbody = (attrs: list(string), children: list(string)) => render("tbody", attrs, children);
    let td = (attrs: list(string), children: list(string)) => render("td", attrs, children);
    let textarea = (attrs: list(string), children: list(string)) => render("textarea", attrs, children);
    let tfoot = (attrs: list(string), children: list(string)) => render("tfoot", attrs, children);
    let th = (attrs: list(string), children: list(string)) => render("th", attrs, children);
    let thead = (attrs: list(string), children: list(string)) => render("thead", attrs, children);
    let time = (attrs: list(string), children: list(string)) => render("time", attrs, children);
    let title = (attrs: list(string), children: list(string)) => render("title", attrs, children);
    let tr = (attrs: list(string), children: list(string)) => render("tr", attrs, children);
    let track = (attrs: list(string), children: list(string)) => render("track", attrs, children);
    let u = (attrs: list(string), children: list(string)) => render("u", attrs, children);
    let var = (attrs: list(string), children: list(string)) => render("var", attrs, children);
    let video = (attrs: list(string), children: list(string)) => render("video", attrs, children);
    let wbr = (attrs: list(string), children: list(string)) => render("wbr", attrs, children);    
};